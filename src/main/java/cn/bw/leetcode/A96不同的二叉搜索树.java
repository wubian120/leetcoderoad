package cn.bw.leetcode;

/**
 * @description: 96 不同的二叉搜索树
 *
 * 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
 * 示例:
 * 输入: 3
 * 输出: 5
 * 解释:
 * 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
 *
 *    1         3     3      2      1
 *     \       /     /      / \      \
 *      3     2     1      1   3      2
 *     /     /       \                 \
 *    2     1         2                 3
 * @思路：
 *       假设 n个节点组成的二叉搜索树的个数 G(n) ，f（i） 是以i为根的 二叉搜索树的个数。
 *
 *        G(n) = f(1) + f(2) + f(3) + f(4) + ... + f(n) ------------ 1
 *
 *       n为根节点，  i为 子树根节点， 左子树 [1,2,3,4,...,i-1] 右子树 [i+1, i+2, ... n]
 *       所以当 i 为 根，  左子 个数 i-1,  右子树个数  n-i;
 *
 *      f(i) = G（i-1）* G(n-i)  --------- 2
 *      由 1， 2 两式可得 ：
 *      G(n) = G(0) * G(n-1) + G(1) * G(n-2) + G(2) * G(n-3) +... + G(n-1) * G(0)
 *
 *
 *
 * @auther: bian.wu
 * @date: 2019/5/6 19:55
 */
public class A96不同的二叉搜索树 {

    public int numTrees(int n){

        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i=2;i<=n;i++){
            for(int j=0;j<i;j++){
                dp[i] += dp[j] * dp[i-1-j];
            }
        }
        return dp[n];
    }

}
